// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wisdom.proto

package wisdom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Wisdom with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Wisdom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Wisdom with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WisdomMultiError, or nil if none found.
func (m *Wisdom) ValidateAll() error {
	return m.validate(true)
}

func (m *Wisdom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WisdomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WisdomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WisdomValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WisdomMultiError(errors)
	}

	return nil
}

// WisdomMultiError is an error wrapping multiple validation errors returned by
// Wisdom.ValidateAll() if the designated constraints aren't met.
type WisdomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WisdomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WisdomMultiError) AllErrors() []error { return m }

// WisdomValidationError is the validation error returned by Wisdom.Validate if
// the designated constraints aren't met.
type WisdomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WisdomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WisdomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WisdomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WisdomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WisdomValidationError) ErrorName() string { return "WisdomValidationError" }

// Error satisfies the builtin error interface
func (e WisdomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWisdom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WisdomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WisdomValidationError{}

// Validate checks the field values on GetWisdoms with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWisdoms) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWisdoms with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWisdomsMultiError, or
// nil if none found.
func (m *GetWisdoms) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWisdoms) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetWisdomsMultiError(errors)
	}

	return nil
}

// GetWisdomsMultiError is an error wrapping multiple validation errors
// returned by GetWisdoms.ValidateAll() if the designated constraints aren't met.
type GetWisdomsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWisdomsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWisdomsMultiError) AllErrors() []error { return m }

// GetWisdomsValidationError is the validation error returned by
// GetWisdoms.Validate if the designated constraints aren't met.
type GetWisdomsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWisdomsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWisdomsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWisdomsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWisdomsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWisdomsValidationError) ErrorName() string { return "GetWisdomsValidationError" }

// Error satisfies the builtin error interface
func (e GetWisdomsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWisdoms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWisdomsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWisdomsValidationError{}

// Validate checks the field values on GetWisdoms_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWisdoms_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWisdoms_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWisdoms_RequestMultiError, or nil if none found.
func (m *GetWisdoms_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWisdoms_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val < 1 || val > 100 {
		err := GetWisdoms_RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := GetWisdoms_RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWisdoms_RequestMultiError(errors)
	}

	return nil
}

// GetWisdoms_RequestMultiError is an error wrapping multiple validation errors
// returned by GetWisdoms_Request.ValidateAll() if the designated constraints
// aren't met.
type GetWisdoms_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWisdoms_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWisdoms_RequestMultiError) AllErrors() []error { return m }

// GetWisdoms_RequestValidationError is the validation error returned by
// GetWisdoms_Request.Validate if the designated constraints aren't met.
type GetWisdoms_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWisdoms_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWisdoms_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWisdoms_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWisdoms_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWisdoms_RequestValidationError) ErrorName() string {
	return "GetWisdoms_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWisdoms_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWisdoms_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWisdoms_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWisdoms_RequestValidationError{}

// Validate checks the field values on GetWisdoms_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWisdoms_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWisdoms_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWisdoms_ResponseMultiError, or nil if none found.
func (m *GetWisdoms_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWisdoms_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWisdoms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWisdoms_ResponseValidationError{
						field:  fmt.Sprintf("Wisdoms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWisdoms_ResponseValidationError{
						field:  fmt.Sprintf("Wisdoms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWisdoms_ResponseValidationError{
					field:  fmt.Sprintf("Wisdoms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWisdoms_ResponseMultiError(errors)
	}

	return nil
}

// GetWisdoms_ResponseMultiError is an error wrapping multiple validation
// errors returned by GetWisdoms_Response.ValidateAll() if the designated
// constraints aren't met.
type GetWisdoms_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWisdoms_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWisdoms_ResponseMultiError) AllErrors() []error { return m }

// GetWisdoms_ResponseValidationError is the validation error returned by
// GetWisdoms_Response.Validate if the designated constraints aren't met.
type GetWisdoms_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWisdoms_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWisdoms_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWisdoms_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWisdoms_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWisdoms_ResponseValidationError) ErrorName() string {
	return "GetWisdoms_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWisdoms_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWisdoms_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWisdoms_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWisdoms_ResponseValidationError{}
